# code: language=ansible
#
---
- name: ArgoCD Deployment
  ansible.builtin.debug:
    msg: "Deploying OpenShift GitOps Operator (ArgoCD)"
  tags: [always, argocd]

- name: Create Operator Subscription for Openshift Gitops
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: operators.coreos.com/v1alpha1
      kind: Subscription
      metadata:
        name: "{{ argocd.operator.subscription.name }}"
        namespace: "{{ argocd.operator.subscription.namespace }}"
      spec:
        channel: "{{ argocd.operator.subscription.channel }}"
        installPlanApproval: Automatic
        name: "{{ argocd.operator.subscription.name }}"
        source: "{{ argocd.operator.subscription.source }}"
        sourceNamespace: openshift-marketplace
  tags: [always, argocd]

- name: Wait for OpenShift GitOps operator
  ansible.builtin.debug:
    msg: "Waiting for {{ argocd.operator.subscription.name }} to become ready"
  tags: [always, argocd]

- name: Check if subscription has completed
  monitor_operator_install:
    name: "{{ argocd.operator.subscription.name }}"
    namespace: "{{ argocd.operator.subscription.namespace }}"
  tags: [always, argocd]

- name: Wait for OpenShift GitOps deployment
  ansible.builtin.debug:
    msg: "Monitoring argocds/{{ argocd.deployment.instance.name }} in {{ argocd.deployment.instance.namespace }} to be ready"
  tags: [always, argocd]

- name: Wait for OpenShift GitOps custom resources to become ready
  monitor_operator_custom_resource:
    name: "{{ argocd.deployment.instance.name }}"
    namespace: "{{ argocd.deployment.instance.namespace }}"
    group: argoproj.io
    version: v1alpha1
    plural: argocds
    custom_ready_key: server
    custom_ready_value: Running
  tags: [always, argocd]

- name: Create quota and limit cluster role
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: "{{ argocd.clusterRole.name }}"
      rules:
        - apiGroups: [""] # specifies core api groups
          resources: ["resourcequotas", "limitranges"]
          verbs: ["create"]
  tags: [always, argocd]

- name: Create role binding
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      # This cluster role binding allows Service Account to create resource quotas and limit ranges in any namespace.
      kind: ClusterRoleBinding
      metadata:
        name: "{{ argocd.roleBinding.name }}"
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: "{{ argocd.roleBinding.roleRef.name }}"
      subjects:
        - kind: ServiceAccount
          name: "{{ argocd.roleBinding.subjects.name }}"
          namespace: "{{ argocd.roleBinding.subjects.namespace }}"
  tags: [always, argocd]

- name: Retrieve ArgoCD admin secret
  kubernetes.core.k8s_info:
    api_version: v1
    kind: Secret
    name: openshift-gitops-cluster
    namespace: openshift-gitops
  register: argocd_secret_result
  tags: [always, argocd]

- name: Decode ArgoCD admin password
  ansible.builtin.set_fact:
    argocd_admin_password: "{{ argocd_secret_result | json_query(query) | ansible.builtin.b64decode }}"
  vars:
    query: 'resources[].data."admin.password"'
  tags: [always, argocd]

- name: Retrieve ArgoCD route
  kubernetes.core.k8s_info:
    api_version: route.openshift.io/v1
    kind: Route
    name: openshift-gitops-server
    namespace: "{{ argocd.deployment.instance.namespace }}"
  register: argocd_route
  tags: [always, argocd]

- name: Decode ArgoCD Admin URL
  ansible.builtin.set_fact:
    argocd_admin_url: "{{ argocd_route.resources[0].spec.port.targetPort }}://{{ argocd_route.resources[0].spec.host }}"
  tags: [always, argocd]

- name: Debug ArgoCD Route Object
  ansible.builtin.debug:
    var: argocd_admin_url
  tags: [never, test]

- name: Display ArgoCD admin password
  ansible.builtin.debug:
    msg:
      - "ArgoCD Admin User: {{ argocd.deployment.instance.adminUser }}"
      - "ArgoCD Admin Password: {{ argocd_admin_password }}"
      - "ArgoCD Admin URL: {{ argocd_admin_url }}"
  tags: [always, argocd]
